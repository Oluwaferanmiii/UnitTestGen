{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, 3) == 5; assert add(0, 0) == 0; assert add(-1, -1) == -2"}
{"input": "def subtract(a, b): return a - b", "output": "def test_subtract(): assert subtract(5, 3) == 2; assert subtract(0, 0) == 0; assert subtract(-1, 1) == -2"}
{"input": "def multiply(a, b): return a * b", "output": "def test_multiply(): assert multiply(2, 3) == 6; assert multiply(-1, 5) == -5; assert multiply(0, 10) == 0"}
{"input": "def divide(a, b): return a / b if b != 0 else 0", "output": "def test_divide(): assert divide(6, 2) == 3.0; assert divide(5, 0) == 0; assert divide(-4, 2) == -2.0"}
{"input": "def power(a, b): return a ** b", "output": "def test_power(): assert power(2, 3) == 8; assert power(0, 5) == 0; assert power(-2, 2) == 4"}
{"input": "def is_even(n): return n % 2 == 0", "output": "def test_is_even(): assert is_even(4) == True; assert is_even(3) == False; assert is_even(0) == True"}
{"input": "def is_positive(n): return n > 0", "output": "def test_is_positive(): assert is_positive(5) == True; assert is_positive(0) == False; assert is_positive(-1) == False"}
{"input": "def concat_str(s1, s2): return s1 + s2", "output": "def test_concat_str(): assert concat_str('hello', 'world') == 'helloworld'; assert concat_str('', '') == ''"}
{"input": "def max_of_two(a, b): return a if a > b else b", "output": "def test_max_of_two(): assert max_of_two(5, 3) == 5; assert max_of_two(3, 5) == 5; assert max_of_two(0, 0) == 0"}
{"input": "def min_of_two(a, b): return a if a < b else b", "output": "def test_min_of_two(): assert min_of_two(5, 3) == 3; assert min_of_two(3, 5) == 3; assert min_of_two(0, 0) == 0"}
{"input": "def is_palindrome(s): return s == s[::-1]", "output": "def test_is_palindrome(): assert is_palindrome('radar') == True; assert is_palindrome('hello') == False; assert is_palindrome('') == True"}
{"input": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)", "output": "def test_factorial(): assert factorial(5) == 120; assert factorial(0) == 1; assert factorial(1) == 1"}
{"input": "def reverse_list(lst): return lst[::-1]", "output": "def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1]; assert reverse_list([]) == []"}
{"input": "def sum_list(lst): return sum(lst)", "output": "def test_sum_list(): assert sum_list([1, 2, 3]) == 6; assert sum_list([]) == 0"}
{"input": "def count_vowels(s): return sum(c in 'aeiou' for c in s.lower())", "output": "def test_count_vowels(): assert count_vowels('hello') == 2; assert count_vowels('xyz') == 0; assert count_vowels('') == 0"}
{"input": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))", "output": "def test_is_prime(): assert is_prime(7) == True; assert is_prime(4) == False; assert is_prime(2) == True"}
{"input": "def get_first(lst): return lst[0] if lst else None", "output": "def test_get_first(): assert get_first([1, 2, 3]) == 1; assert get_first([]) == None"}
{"input": "def get_last(lst): return lst[-1] if lst else None", "output": "def test_get_last(): assert get_last([1, 2, 3]) == 3; assert get_last([]) == None"}
{"input": "def sort_list(lst): return sorted(lst)", "output": "def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3]; assert sort_list([]) == []"}
{"input": "def unique_list(lst): return list(dict.fromkeys(lst))", "output": "def test_unique_list(): assert unique_list([1, 1, 2]) == [1, 2]; assert unique_list([]) == []"}
{"input": "def square(n): return n * n", "output": "def test_square(): assert square(4) == 16; assert square(-3) == 9"}
{"input": "def cube(n): return n ** 3", "output": "def test_cube(): assert cube(3) == 27; assert cube(-2) == -8"}
{"input": "def absolute(n): return abs(n)", "output": "def test_absolute(): assert absolute(-5) == 5; assert absolute(0) == 0"}
{"input": "def is_upper(s): return s.isupper()", "output": "def test_is_upper(): assert is_upper('HELLO') == True; assert is_upper('Hi') == False"}
{"input": "def is_lower(s): return s.islower()", "output": "def test_is_lower(): assert is_lower('hello') == True; assert is_lower('Hi') == False"}
{"input": "def capitalize_str(s): return s.capitalize()", "output": "def test_capitalize_str(): assert capitalize_str('hello') == 'Hello'; assert capitalize_str('') == ''"}
{"input": "def get_middle(s): return s[len(s)//2] if s else ''", "output": "def test_get_middle(): assert get_middle('abc') == 'b'; assert get_middle('') == ''"}
{"input": "def is_empty(lst): return len(lst) == 0", "output": "def test_is_empty(): assert is_empty([]) == True; assert is_empty([1]) == False"}
{"input": "def all_positive(lst): return all(x > 0 for x in lst)", "output": "def test_all_positive(): assert all_positive([1, 2, 3]) == True; assert all_positive([-1, 2]) == False"}
{"input": "def any_negative(lst): return any(x < 0 for x in lst)", "output": "def test_any_negative(): assert any_negative([-1, 0, 1]) == True; assert any_negative([1, 2]) == False"}
{"input": "def average(lst): return sum(lst)/len(lst) if lst else 0", "output": "def test_average(): assert average([1, 2, 3]) == 2; assert average([]) == 0"}
{"input": "def count_occurrences(lst, val): return lst.count(val)", "output": "def test_count_occurrences(): assert count_occurrences([1,2,2,3], 2) == 2; assert count_occurrences([], 1) == 0"}
{"input": "def starts_with(s, prefix): return s.startswith(prefix)", "output": "def test_starts_with(): assert starts_with('hello', 'he') == True; assert starts_with('hello', 'lo') == False"}
{"input": "def ends_with(s, suffix): return s.endswith(suffix)", "output": "def test_ends_with(): assert ends_with('hello', 'lo') == True; assert ends_with('hello', 'he') == False"}
{"input": "def to_uppercase(s): return s.upper()", "output": "def test_to_uppercase(): assert to_uppercase('hello') == 'HELLO'"}
{"input": "def to_lowercase(s): return s.lower()", "output": "def test_to_lowercase(): assert to_lowercase('HELLO') == 'hello'"}
{"input": "def remove_spaces(s): return s.replace(' ', '')", "output": "def test_remove_spaces(): assert remove_spaces('a b c') == 'abc'"}
{"input": "def is_anagram(s1, s2): return sorted(s1) == sorted(s2)", "output": "def test_is_anagram(): assert is_anagram('listen', 'silent') == True; assert is_anagram('hello', 'world') == False"}
{"input": "def repeat_string(s, n): return s * n", "output": "def test_repeat_string(): assert repeat_string('a', 3) == 'aaa'; assert repeat_string('', 5) == ''"}
{"input": "def square_list(lst): return [x**2 for x in lst]", "output": "def test_square_list(): assert square_list([1,2,3]) == [1,4,9]"}
{"input": "def filter_even(lst): return [x for x in lst if x % 2 == 0]", "output": "def test_filter_even(): assert filter_even([1,2,3,4]) == [2,4]"}
{"input": "def filter_odd(lst): return [x for x in lst if x % 2 != 0]", "output": "def test_filter_odd(): assert filter_odd([1,2,3,4]) == [1,3]"}
{"input": "def merge_lists(a, b): return a + b", "output": "def test_merge_lists(): assert merge_lists([1], [2]) == [1,2]"}
{"input": "def contains_value(lst, val): return val in lst", "output": "def test_contains_value(): assert contains_value([1,2,3], 2) == True; assert contains_value([], 1) == False"}
{"input": "def char_frequency(s): return {c: s.count(c) for c in set(s)}", "output": "def test_char_frequency(): assert char_frequency('aab') == {'a': 2, 'b': 1}"}
{"input": "def flatten(nested): return [item for sublist in nested for item in sublist]", "output": "def test_flatten(): assert flatten([[1,2],[3,4]]) == [1,2,3,4]"}
{"input": "def count_words(s): return len(s.split())", "output": "def test_count_words(): assert count_words('hello world') == 2; assert count_words('') == 0"}
{"input": "def find_max(lst): return max(lst) if lst else None", "output": "def test_find_max(): assert find_max([1,5,3]) == 5; assert find_max([]) == None"}
{"input": "def find_min(lst): return min(lst) if lst else None", "output": "def test_find_min(): assert find_min([1,5,3]) == 1; assert find_min([]) == None"}
{"input": "def remove_duplicates(lst): return list(set(lst))", "output": "def test_remove_duplicates(): assert sorted(remove_duplicates([1,1,2,2])) == [1,2]"}
{"input": "def is_sorted(lst): return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "output": "def test_is_sorted(): assert is_sorted([1,2,3]) == True; assert is_sorted([3,2,1]) == False"}
{"input": "def gcd(a, b): while b: a, b = b, a % b; return a", "output": "def test_gcd(): assert gcd(48, 18) == 6; assert gcd(7, 13) == 1"}
{"input": "def lcm(a, b): return abs(a * b) // gcd(a, b)", "output": "def test_lcm(): assert lcm(12, 18) == 36; assert lcm(7, 13) == 91"}
{"input": "def binary_search(lst, target): left, right = 0, len(lst)-1; while left <= right: mid = (left + right) // 2; if lst[mid] == target: return mid; elif lst[mid] < target: left = mid + 1; else: right = mid - 1; return -1", "output": "def test_binary_search(): assert binary_search([1,2,3,4], 3) == 2; assert binary_search([1,2,3], 5) == -1"}
{"input": "def fibonacci(n): return n if n <= 1 else fibonacci(n-1) + fibonacci(n-2)", "output": "def test_fibonacci(): assert fibonacci(5) == 5; assert fibonacci(0) == 0"}
{"input": "def is_leap_year(year): return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)", "output": "def test_is_leap_year(): assert is_leap_year(2020) == True; assert is_leap_year(1900) == False"}
{"input": "def rotate_list(lst, k): return lst[-k:] + lst[:-k] if lst else []", "output": "def test_rotate_list(): assert rotate_list([1,2,3], 1) == [3,1,2]"}
{"input": "def zip_lists(a, b): return list(zip(a, b))", "output": "def test_zip_lists(): assert zip_lists([1,2], [3,4]) == [(1,3), (2,4)]"}
{"input": "def unzip_pairs(pairs): return list(zip(*pairs)) if pairs else ([], [])", "output": "def test_unzip_pairs(): assert unzip_pairs([(1,3), (2,4)]) == ([1,2], [3,4])"}
{"input": "def map_function(lst, func): return [func(x) for x in lst]", "output": "def test_map_function(): assert map_function([1,2,3], lambda x: x*2) == [2,4,6]"}
{"input": "def reduce_function(lst, func, initial): result = initial; for x in lst: result = func(result, x); return result", "output": "def test_reduce_function(): assert reduce_function([1,2,3], lambda x,y: x+y, 0) == 6"}
{"input": "def partition(lst, pivot): return [x for x in lst if x <= pivot], [x for x in lst if x > pivot]", "output": "def test_partition(): assert partition([1,5,2,8], 4) == ([1,2], [5,8])"}
{"input": "def quicksort(lst): if len(lst) <= 1: return lst; pivot = lst[len(lst)//2]; left = [x for x in lst if x < pivot]; middle = [x for x in lst if x == pivot]; right = [x for x in lst if x > pivot]; return quicksort(left) + middle + quicksort(right)", "output": "def test_quicksort(): assert quicksort([3,1,4,1,5]) == [1,1,3,4,5]"}
{"input": "def merge_sorted(a, b): result = []; i = j = 0; while i < len(a) and j < len(b): if a[i] <= b[j]: result.append(a[i]); i += 1; else: result.append(b[j]); j += 1; return result + a[i:] + b[j:]", "output": "def test_merge_sorted(): assert merge_sorted([1,3], [2,4]) == [1,2,3,4]"}
{"input": "def str_to_int(s): return int(s) if s.isdigit() else 0", "output": "def test_str_to_int(): assert str_to_int('123') == 123; assert str_to_int('abc') == 0"}
{"input": "def int_to_str(n): return str(n)", "output": "def test_int_to_str(): assert int_to_str(123) == '123'"}
{"input": "def is_substring(s, sub): return sub in s", "output": "def test_is_substring(): assert is_substring('hello', 'ell') == True; assert is_substring('hello', 'xyz') == False"}
{"input": "def replace_char(s, old, new): return s.replace(old, new)", "output": "def test_replace_char(): assert replace_char('hello', 'l', 'x') == 'hexlo'"}
{"input": "def truncate(s, length): return s[:length] if len(s) > length else s", "output": "def test_truncate(): assert truncate('hello', 3) == 'hel'"}
{"input": "def pad_string(s, length, char): return s.ljust(length, char)", "output": "def test_pad_string(): assert pad_string('hi', 4, '*') == 'hi**'"}
{"input": "def validate_email(email): import re; return bool(re.match(r'^[\\w\\.-]+@[\\w\\.-]+$', email))", "output": "def test_validate_email(): assert validate_email('test@example.com') == True; assert validate_email('invalid') == False"}
{"input": "def count_digits(s): return sum(c.isdigit() for c in s)", "output": "def test_count_digits(): assert count_digits('abc123') == 3"}
{"input": "def is_power_of_two(n): return n > 0 and (n & (n - 1)) == 0", "output": "def test_is_power_of_two(): assert is_power_of_two(8) == True; assert is_power_of_two(10) == False"}
{"input": "def hamming_distance(s1, s2): return sum(c1 != c2 for c1, c2 in zip(s1, s2)) if len(s1) == len(s2) else float('inf')", "output": "def test_hamming_distance(): assert hamming_distance('karolin', 'kathrin') == 3"}
{"input": "def rotate_matrix(matrix): return [list(row) for row in zip(*matrix[::-1])]", "output": "def test_rotate_matrix(): assert rotate_matrix([[1,2],[3,4]]) == [[3,1],[4,2]]"}
{"input": "def diagonal_sum(matrix): return sum(matrix[i][i] for i in range(len(matrix))) if matrix else 0", "output": "def test_diagonal_sum(): assert diagonal_sum([[1,2,3],[4,5,6],[7,8,9]]) == 15"}
{"input": "def transpose_matrix(matrix): return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] if matrix and matrix[0] else []", "output": "def test_transpose_matrix(): assert transpose_matrix([[1,2],[3,4]]) == [[1,3],[2,4]]"}
{"input": "def remove_punctuation(s): import string; return s.translate(str.maketrans('', '', string.punctuation))", "output": "def test_remove_punctuation(): assert remove_punctuation('Hello, world!') == 'Hello world'"}
{"input": "def title_case(s): return s.title()", "output": "def test_title_case(): assert title_case('hello world') == 'Hello World'"}
{"input": "def reverse_string(s): return s[::-1]", "output": "def test_reverse_string(): assert reverse_string('abc') == 'cba'"}
{"input": "def count_uppercase(s): return sum(1 for c in s if c.isupper())", "output": "def test_count_uppercase(): assert count_uppercase('HeLLo') == 3"}
{"input": "def count_lowercase(s): return sum(1 for c in s if c.islower())", "output": "def test_count_lowercase(): assert count_lowercase('HeLLo') == 2"}
{"input": "def count_whitespace(s): return sum(1 for c in s if c.isspace())", "output": "def test_count_whitespace(): assert count_whitespace('a b  c') == 3"}
{"input": "def flatten_once(nested): return [item for sublist in nested for item in (sublist if isinstance(sublist, list) else [sublist])]", "output": "def test_flatten_once(): assert flatten_once([[1,2], 3, [4]]) == [1,2,3,4]"}
{"input": "def find_duplicates(lst): return list({x for x in lst if lst.count(x) > 1})", "output": "def test_find_duplicates(): assert sorted(find_duplicates([1,2,2,3,3,3])) == [2,3]"}
{"input": "def count_unique(lst): return len(set(lst))", "output": "def test_count_unique(): assert count_unique([1,2,2,3]) == 3"}
{"input": "def remove_none(lst): return [x for x in lst if x is not None]", "output": "def test_remove_none(): assert remove_none([1, None, 2]) == [1, 2]"}
{"input": "def chunk_list(lst, size): return [lst[i:i+size] for i in range(0, len(lst), size)]", "output": "def test_chunk_list(): assert chunk_list([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]"}
{"input": "def is_float(s): try: float(s); return True; except: return False", "output": "def test_is_float(): assert is_float('3.14') == True; assert is_float('abc') == False"}
{"input": "def is_integer(s): try: int(s); return True; except: return False", "output": "def test_is_integer(): assert is_integer('42') == True; assert is_integer('3.14') == False"}
{"input": "def safe_divide(a, b): return a / b if b != 0 else None", "output": "def test_safe_divide(): assert safe_divide(10, 2) == 5; assert safe_divide(5, 0) == None"}
{"input": "def percentage(part, whole): return (part / whole) * 100 if whole != 0 else 0", "output": "def test_percentage(): assert percentage(25, 100) == 25; assert percentage(1, 0) == 0"}
{"input": "def contains_only_digits(s): return s.isdigit()", "output": "def test_contains_only_digits(): assert contains_only_digits('123') == True; assert contains_only_digits('abc') == False"}
{"input": "def is_valid_hex(s): return all(c in '0123456789abcdefABCDEF' for c in s)", "output": "def test_is_valid_hex(): assert is_valid_hex('1a3f') == True; assert is_valid_hex('xyz') == False"}
{"input": "def flatten_dict(d): return {k: v for subdict in d.values() if isinstance(subdict, dict) for k, v in subdict.items()}", "output": "def test_flatten_dict(): assert flatten_dict({'a': {'x': 1}, 'b': {'y': 2}}) == {'x':1, 'y':2}"}
{"input": "def filter_none(lst): return list(filter(None, lst))", "output": "def test_filter_none(): assert filter_none([0, 1, None, '', 2]) == [1, 2]"}
{"input": "def multiply_list(lst): result = 1; [result := result * x for x in lst]; return result", "output": "def test_multiply_list(): assert multiply_list([1,2,3,4]) == 24"}
{"input": "def all_equal(lst): return all(x == lst[0] for x in lst) if lst else True", "output": "def test_all_equal(): assert all_equal([2,2,2]) == True; assert all_equal([1,2]) == False"}
{"input": "def product_except_self(lst): return [eval('*'.join(map(str, lst[:i] + lst[i+1:]))) for i in range(len(lst))]", "output": "def test_product_except_self(): assert product_except_self([1,2,3]) == [6,3,2]"}
{"input": "def shift_left(lst): return lst[1:] + [lst[0]] if lst else []", "output": "def test_shift_left(): assert shift_left([1,2,3]) == [2,3,1]"}
{"input": "def add(a, b): return a + b if a + b < 100 else 99", "output": "def test_add(): assert add(5, 3) == 8; assert add(50, 60) == 99; assert add(-1, -2) == -3"}
{"input": "def subtract(a, b): return a - b if a > b else b - a", "output": "def test_subtract(): assert subtract(5, 3) == 2; assert subtract(3, 5) == 2; assert subtract(0, 0) == 0"}
{"input": "def multiply(a, b): return a * b if abs(a * b) < 1000 else 999", "output": "def test_multiply(): assert multiply(5, 3) == 15; assert multiply(100, 2) == 999; assert multiply(-2, 3) == -6"}
{"input": "def divide(a, b): return a / b if b != 0 and a % b == 0 else 0", "output": "def test_divide(): assert divide(6, 2) == 3; assert divide(5, 0) == 0; assert divide(4, 2) == 2"}
{"input": "def power(a, b): return a ** b if b >= 0 else 1 / (a ** -b)", "output": "def test_power(): assert power(2, 3) == 8; assert power(2, -2) == 0.25; assert power(0, 5) == 0"}
{"input": "def is_even(n): return n % 2 == 0 if n >= 0 else False", "output": "def test_is_even(): assert is_even(4) == True; assert is_even(-3) == False; assert is_even(0) == True"}
{"input": "def is_positive(n): return n > 0 if isinstance(n, (int, float)) else False", "output": "def test_is_positive(): assert is_positive(5) == True; assert is_positive(-1) == False; assert is_positive('a') == False"}
{"input": "def concat_str(s1, s2): return s1 + s2 if len(s1) + len(s2) <= 10 else s1", "output": "def test_concat_str(): assert concat_str('hi', 'there') == 'hithere'; assert concat_str('long', 'text') == 'long'"}
{"input": "def max_of_two(a, b): return a if a > b and a < 100 else b", "output": "def test_max_of_two(): assert max_of_two(5, 3) == 5; assert max_of_two(150, 3) == 3; assert max_of_two(0, 0) == 0"}
{"input": "def min_of_two(a, b): return a if a < b and a > -100 else b", "output": "def test_min_of_two(): assert min_of_two(5, 3) == 3; assert min_of_two(-150, 3) == 3; assert min_of_two(0, 0) == 0"}
{"input": "def is_palindrome(s): return s == s[::-1] if len(s) <= 5 else False", "output": "def test_is_palindrome(): assert is_palindrome('radar') == True; assert is_palindrome('abcdef') == False; assert is_palindrome('') == True"}
{"input": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1) if n < 10 else 3628800", "output": "def test_factorial(): assert factorial(5) == 120; assert factorial(10) == 3628800; assert factorial(0) == 1"}
{"input": "def reverse_list(lst): return lst[::-1] if len(lst) < 5 else lst", "output": "def test_reverse_list(): assert reverse_list([1, 2, 3]) == [3, 2, 1]; assert reverse_list([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"}
{"input": "def sum_list(lst): return sum(lst) if all(isinstance(x, (int, float)) for x in lst) else 0", "output": "def test_sum_list(): assert sum_list([1, 2, 3]) == 6; assert sum_list(['a', 2]) == 0; assert sum_list([]) == 0"}
{"input": "def count_vowels(s): return sum(c in 'aeiou' for c in s.lower()) if s else 0", "output": "def test_count_vowels(): assert count_vowels('hello') == 2; assert count_vowels('xyz') == 0; assert count_vowels('') == 0"}
{"input": "def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)) if n < 100 else False", "output": "def test_is_prime(): assert is_prime(7) == True; assert is_prime(100) == False; assert is_prime(2) == True"}
{"input": "def get_first(lst): return lst[0] if lst and len(lst) > 0 else None", "output": "def test_get_first(): assert get_first([1, 2, 3]) == 1; assert get_first([]) == None"}
{"input": "def get_last(lst): return lst[-1] if lst and len(lst) > 0 else None", "output": "def test_get_last(): assert get_last([1, 2, 3]) == 3; assert get_last([]) == None"}
{"input": "def sort_list(lst): return sorted(lst) if len(lst) <= 10 else lst", "output": "def test_sort_list(): assert sort_list([3, 1, 2]) == [1, 2, 3]; assert sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"}
{"input": "def unique_list(lst): return list(dict.fromkeys(lst)) if len(lst) <= 10 else lst", "output": "def test_unique_list(): assert unique_list([1, 1, 2]) == [1, 2]; assert unique_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"}
{"input": "def is_divisible(a, b): return a % b == 0 if b != 0 else False", "output": "def test_is_divisible(): assert is_divisible(10, 2) == True; assert is_divisible(10, 3) == False; assert is_divisible(5, 0) == False"}
{"input": "def remove_duplicates_ordered(lst): seen = set(); return [x for x in lst if not (x in seen or seen.add(x))]", "output": "def test_remove_duplicates_ordered(): assert remove_duplicates_ordered([1,2,2,3,1]) == [1,2,3]"}
{"input": "def mode(lst): from statistics import mode; return mode(lst) if lst else None", "output": "def test_mode(): assert mode([1,1,2,2,2,3]) == 2; assert mode([]) == None"}
{"input": "def median(lst): from statistics import median; return median(lst) if lst else None", "output": "def test_median(): assert median([1,2,3]) == 2; assert median([1,2,3,4]) == 2.5; assert median([]) == None"}
{"input": "def count_char(s, c): return s.count(c)", "output": "def test_count_char(): assert count_char('banana', 'a') == 3; assert count_char('banana', 'z') == 0"}
{"input": "def index_of(lst, val): return lst.index(val) if val in lst else -1", "output": "def test_index_of(): assert index_of([1,2,3], 2) == 1; assert index_of([1,2,3], 5) == -1"}
{"input": "def toggle_case(s): return ''.join(c.lower() if c.isupper() else c.upper() for c in s)", "output": "def test_toggle_case(): assert toggle_case('AbC') == 'aBc'; assert toggle_case('123') == '123'"}
{"input": "def get_extension(filename): return filename.split('.')[-1] if '.' in filename else ''", "output": "def test_get_extension(): assert get_extension('file.txt') == 'txt'; assert get_extension('file') == ''"}
{"input": "def strip_html(s): import re; return re.sub(r'<[^>]*>', '', s)", "output": "def test_strip_html(): assert strip_html('<p>Hello</p>') == 'Hello'; assert strip_html('no tags') == 'no tags'"}
{"input": "def word_frequencies(s): from collections import Counter; return dict(Counter(s.split()))", "output": "def test_word_frequencies(): assert word_frequencies('a b a') == {'a': 2, 'b': 1}"}
{"input": "def has_duplicates(lst): return len(lst) != len(set(lst))", "output": "def test_has_duplicates(): assert has_duplicates([1,2,3,2]) == True; assert has_duplicates([1,2,3]) == False"}
{"input": "def is_valid_password(p): return len(p) >= 8 and any(c.isdigit() for c in p) and any(c.isalpha() for c in p)", "output": "def test_is_valid_password(): assert is_valid_password('Pass1234') == True; assert is_valid_password('short') == False"}
{"input": "def round_to_places(n, p): return round(n, p)", "output": "def test_round_to_places(): assert round_to_places(3.14159, 2) == 3.14; assert round_to_places(3.1459, 3) == 3.146"}
{"input": "def intersection(a, b): return list(set(a) & set(b))", "output": "def test_intersection(): assert sorted(intersection([1,2,3], [2,3,4])) == [2,3]"}
{"input": "def difference(a, b): return list(set(a) - set(b))", "output": "def test_difference(): assert sorted(difference([1,2,3], [2,3])) == [1]"}
{"input": "def symmetric_difference(a, b): return list(set(a) ^ set(b))", "output": "def test_symmetric_difference(): assert sorted(symmetric_difference([1,2,3], [2,3,4])) == [1,4]"}
{"input": "def split_by_delimiter(s, d): return s.split(d)", "output": "def test_split_by_delimiter(): assert split_by_delimiter('a,b,c', ',') == ['a','b','c']"}
{"input": "def safe_get(d, key): return d.get(key, None)", "output": "def test_safe_get(): assert safe_get({'a': 1}, 'a') == 1; assert safe_get({}, 'x') == None"}
{"input": "def deep_flatten(lst): from collections.abc import Iterable; result = []; [result.extend(deep_flatten(x)) if isinstance(x, Iterable) and not isinstance(x, (str, bytes)) else result.append(x) for x in lst]; return result", "output": "def test_deep_flatten(): assert deep_flatten([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5]"}
{"input": "def remove_keys(d, keys): return {k: v for k, v in d.items() if k not in keys}", "output": "def test_remove_keys(): assert remove_keys({'a':1,'b':2}, ['a']) == {'b':2}"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(1, 1) == 2; assert add(2, 2) == 4; assert add(3, 4) == 7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(0, 5) == 5; assert add(-2, 3) == 1; assert add(10, -5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(4, 6) == 10; assert add(-3, -2) == -5; assert add(7, 8) == 15"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, -1) == 1; assert add(-4, 9) == 5; assert add(6, -3) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, 5) == 10; assert add(-1, 0) == -1; assert add(9, 1) == 10"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 2) == 5; assert add(-5, 7) == 2; assert add(0, -4) == -4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(8, 2) == 10; assert add(-6, 3) == -3; assert add(4, -7) == -3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(1, 9) == 10; assert add(-8, 4) == -4; assert add(5, -2) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(7, 3) == 10; assert add(-9, 5) == -4; assert add(2, 8) == 10"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(6, 4) == 10; assert add(-7, 2) == -5; assert add(3, -6) == -3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(9, 1) == 10; assert add(-10, 6) == -4; assert add(5, 5) == 10"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, 3) == 5; assert add(-1, 5) == 4; assert add(0, 0) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(4, 5) == 9; assert add(-2, -3) == -5; assert add(1, -1) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 7) == 10; assert add(-4, 6) == 2; assert add(8, -4) == 4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, 6) == 11; assert add(-5, 5) == 0; assert add(2, -2) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(7, 4) == 11; assert add(-3, 8) == 5; assert add(6, -5) == 1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(1, 4) == 5; assert add(-6, 7) == 1; assert add(9, -9) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(8, 3) == 11; assert add(-7, 9) == 2; assert add(4, -1) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(6, 5) == 11; assert add(-8, 3) == -5; assert add(3, 2) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(9, 2) == 11; assert add(-9, 4) == -5; assert add(0, 1) == 1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(1, 2) == 3; assert add(3, 4) == 7; assert add(5, -2) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(0, 1) == 1; assert add(2, -3) == -1; assert add(4, 6) == 10"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, 5) == 10; assert add(-1, 1) == 0; assert add(7, -4) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, 8) == 10; assert add(-5, 6) == 1; assert add(3, -1) == 2"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(6, 4) == 10; assert add(-2, -2) == -4; assert add(9, -3) == 6"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(1, 9) == 10; assert add(-4, 7) == 3; assert add(0, -5) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 7) == 10; assert add(-6, 8) == 2; assert add(2, 2) == 4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(4, 5) == 9; assert add(-3, -1) == -4; assert add(6, -6) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(7, 3) == 10; assert add(-7, 9) == 2; assert add(1, -8) == -7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(8, 2) == 10; assert add(-8, 5) == -3; assert add(5, 0) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(9, 1) == 10; assert add(-9, 4) == -5; assert add(2, -9) == -7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, 3) == 5; assert add(-1, 5) == 4; assert add(0, 0) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 2) == 5; assert add(-2, 7) == 5; assert add(4, -4) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, 6) == 11; assert add(-5, 2) == -3; assert add(6, 5) == 11"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(7, 4) == 11; assert add(-6, 3) == -3; assert add(8, -1) == 7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(1, 4) == 5; assert add(-3, 6) == 3; assert add(9, -6) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(8, 3) == 11; assert add(-4, 8) == 4; assert add(2, -5) == -3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(6, 5) == 11; assert add(-5, 7) == 2; assert add(3, -2) == 1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(9, 2) == 11; assert add(-7, 4) == -3; assert add(0, 2) == 2"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(4, 7) == 11; assert add(-8, 9) == 1; assert add(5, -5) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-1, -2) == -3; assert add(-4, -5) == -9; assert add(-7, 3) == -4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-2, -3) == -5; assert add(-6, -1) == -7; assert add(-8, 4) == -4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-3, -4) == -7; assert add(-5, -2) == -7; assert add(-9, 5) == -4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-4, -6) == -10; assert add(-1, -7) == -8; assert add(-3, 2) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-5, -3) == -8; assert add(-2, -6) == -8; assert add(-7, 1) == -6"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-6, -4) == -10; assert add(-3, -5) == -8; assert add(-8, 2) == -6"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-7, -1) == -8; assert add(-4, -3) == -7; assert add(-9, 3) == -6"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-8, -2) == -10; assert add(-5, -4) == -9; assert add(-1, -9) == -10"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-9, -3) == -12; assert add(-6, -2) == -8; assert add(-7, 4) == -3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-10, -1) == -11; assert add(-3, -7) == -10; assert add(-5, 6) == 1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-1, -5) == -6; assert add(-2, -8) == -10; assert add(-4, 7) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-2, -6) == -8; assert add(-3, -9) == -12; assert add(-6, 5) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-3, -7) == -10; assert add(-4, -8) == -12; assert add(-2, 9) == 7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-4, -9) == -13; assert add(-5, -6) == -11; assert add(-1, 8) == 7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-5, -8) == -13; assert add(-6, -3) == -9; assert add(-3, 6) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-6, -7) == -13; assert add(-7, -2) == -9; assert add(-5, 4) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-7, -5) == -12; assert add(-8, -1) == -9; assert add(-2, 3) == 1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-8, -4) == -12; assert add(-9, -2) == -11; assert add(-6, 2) == -4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-9, -6) == -15; assert add(-1, -4) == -5; assert add(-7, 5) == -2"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-10, -3) == -13; assert add(-2, -5) == -7; assert add(-8, 6) == -2"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-1, 5) == 4; assert add(-2, 6) == 4; assert add(-3, 7) == 4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-4, 8) == 4; assert add(-5, 9) == 4; assert add(-6, 10) == 4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-7, 11) == 4; assert add(-8, 12) == 4; assert add(-9, 13) == 4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-10, 14) == 4; assert add(-1, -5) == -6; assert add(-2, -3) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-3, -4) == -7; assert add(-5, -6) == -11; assert add(-7, -8) == -15"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-9, -1) == -10; assert add(-2, 5) == 3; assert add(-3, 6) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-4, 7) == 3; assert add(-5, 8) == 3; assert add(-6, 9) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-7, 10) == 3; assert add(-8, 11) == 3; assert add(-9, 12) == 3"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-10, 13) == 3; assert add(1, -5) == -4; assert add(2, -6) == -4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, -7) == -4; assert add(4, -8) == -4; assert add(5, -9) == -4"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(6, -10) == -4; assert add(7, -5) == 2; assert add(8, -6) == 2"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(9, -7) == 2; assert add(10, -8) == 2; assert add(11, -9) == 2"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(12, -10) == 2; assert add(-1, 1) == 0; assert add(-2, 2) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-3, 3) == 0; assert add(-4, 4) == 0; assert add(-5, 5) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-6, 6) == 0; assert add(-7, 7) == 0; assert add(-8, 8) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-9, 9) == 0; assert add(-10, 10) == 0; assert add(1, -1) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, -2) == 0; assert add(3, -3) == 0; assert add(4, -4) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, -5) == 0; assert add(6, -6) == 0; assert add(7, -7) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(8, -8) == 0; assert add(9, -9) == 0; assert add(10, -10) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-1, 10) == 9; assert add(-2, 11) == 9; assert add(-3, 12) == 9"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-10, 5) == -5; assert add(-9, 4) == -5; assert add(-8, 3) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-7, 2) == -5; assert add(-6, 1) == -5; assert add(-5, 0) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-4, -1) == -5; assert add(-3, -2) == -5; assert add(-2, -3) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-1, -4) == -5; assert add(0, -5) == -5; assert add(1, -6) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, -7) == -5; assert add(3, -8) == -5; assert add(4, -9) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, -10) == -5; assert add(10, -10) == 0; assert add(9, -9) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(8, -8) == 0; assert add(7, -7) == 0; assert add(6, -6) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, -5) == 0; assert add(4, -4) == 0; assert add(3, -3) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, -2) == 0; assert add(1, -1) == 0; assert add(0, 0) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-1, 1) == 0; assert add(-2, 2) == 0; assert add(-3, 3) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-4, 4) == 0; assert add(-5, 5) == 0; assert add(-6, 6) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-7, 7) == 0; assert add(-8, 8) == 0; assert add(-9, 9) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-10, 10) == 0; assert add(1, 2) == 3; assert add(2, 3) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(4, 5) == 9; assert add(5, 6) == 11"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(6, 7) == 13; assert add(7, 8) == 15; assert add(8, 9) == 17"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(9, 10) == 19; assert add(-1, -2) == -3; assert add(-2, -3) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-3, -4) == -7; assert add(-4, -5) == -9; assert add(-5, -6) == -11"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-6, -7) == -13; assert add(-7, -8) == -15; assert add(-8, -9) == -17"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-9, -10) == -19; assert add(10, 10) == 20; assert add(-10, -10) == -20"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(10, -5) == 5; assert add(-10, 15) == 5; assert add(5, -10) == -5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-3, -4) == -7; assert add(-4, -3) == -7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-5, -2) == -7; assert add(-6, -1) == -7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-7, 0) == -7; assert add(-8, 1) == -7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-9, 2) == -7; assert add(-10, 3) == -7"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(6, -7) == -1; assert add(5, -6) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(4, -5) == -1; assert add(3, -4) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(2, -3) == -1; assert add(1, -2) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(0, -1) == -1; assert add(-1, 0) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-2, 1) == -1; assert add(-3, 2) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-4, 3) == -1; assert add(-5, 4) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-6, 5) == -1; assert add(-7, 6) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-8, 7) == -1; assert add(-9, 8) == -1"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-10, 9) == -1; assert add(10, -10) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(9, -9) == 0; assert add(8, -8) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(7, -7) == 0; assert add(6, -6) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(5, -5) == 0; assert add(4, -4) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, -3) == 0; assert add(2, -2) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(1, -1) == 0; assert add(0, 0) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-1, 1) == 0; assert add(-2, 2) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(-3, 3) == 0; assert add(-4, 4) == 0"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
{"input": "def add(a, b): return a + b", "output": "def test_add(): assert add(3, 4) == 7; assert add(-2, -3) == -5; assert add(0, 5) == 5"}
